## History

- March 2017 **javelin**, later **on-prem** today **PrivateCloud**
- Docker image named **bzm-app**
- Summer 2019 made Python 3 & use handlers (NG)
    - [Blueprints](https://github.com/Blazemeter/private-cloud/tree/master/app/bzm_gateway_interceptor/blueprint) for routes
    - [Hooks](https://github.com/Blazemeter/private-cloud/tree/master/app/bzm_gateway_interceptor/hooks) for logic


## Concept

- [BZA](https://github.com/Blazemeter/a.blazemeter.com)
    - REST API
    - OPLs
    - Load engines **require** S3-like storage
- An on-premise [Flask](https://flask.palletsprojects.com/) "reverse proxy" to extract/inject from REST API request/responses sensitive information
- BZA uses S3 for storage, Private Cloud can use S3-compatible
- Encode/decode request, response, both? [codec](https://github.com/Blazemeter/private-cloud/tree/master/bzm_app/codec)
- Encapsulate different [implementation](https://github.com/Blazemeter/private-cloud/blob/master/app/bzm_gateway_interceptor/hooks/tests.py#L96) of API

## ... BlazeCT?

- Multiple [backends](https://github.com/Blazemeter/private-cloud/blob/master/bzm_app/config.py#L56)
- Blueprints/hooks separation was arbitrary

There must be a better way...

- [Abstract](https://github.com/Blazemeter/private-cloud/blob/master/private_cloud/handler/__init__.py) handlers
    - [Handlers](https://github.com/Blazemeter/private-cloud/tree/master/private_cloud/handler) intercepts HTTP request by method and path

: crane components encode/decode
: bza /prepare
: scheduler

## Secrets

- Hash table ([salted](https://github.com/Blazemeter/private-cloud/blob/master/bzm_app/codec/__init__.py#L134))
    - Key = hash(cleartext)
    - Value = cleartext
- Storage in files **keys** at S3-like storage
- [Mappings](https://github.com/Blazemeter/private-cloud/blob/master/bzm_app/mapping.py#L259) are storage held **keys**
    - Path gives context
    - Use [context manager](https://github.com/Blazemeter/private-cloud/blob/master/bzm_app/mapping.py#L371) to ensure secrets are flushed
    ```
    with Mapping(*args) as m:
        # do something with "m"
    ```
    - Use [Dictionary](https://github.com/Blazemeter/private-cloud/blob/master/bzm_app/mapping.py#L225) for Mapping-like in-memory object (**not** on disk)
    ```
    with Mapping(*args) as m:
        d = Dictionary() # do something with "d"
        m.merge(d)       # preseve "d" in persistent "m"
    ```

## Mapping

- Mapping's path is context
- Encode/decode logic:
    - [Blueprints](https://github.com/Blazemeter/private-cloud/tree/master/app/bzm_gateway_interceptor/blueprint_)
        - [Hooks](https://github.com/Blazemeter/private-cloud/tree/master/app/bzm_gateway_interceptor/hooks)
    - [Handlers](https://github.com/Blazemeter/private-cloud/tree/master/private_cloud/handler) integrates both: blueprint and hook

: [err.]keys[.apm*]


## Handlers

- Simple [handler](https://github.com/Blazemeter/private-cloud/blob/master/private_cloud/handler/bzm/static.py#L24)
- Catch all handlers
    - [bzm](https://github.com/Blazemeter/private-cloud/blob/master/private_cloud/handler/bzm/catch_all.py)
    - [mock](https://github.com/Blazemeter/private-cloud/blob/master/private_cloud/handler/mock/catch_all.py)
- Debugging headers injected by handlers
    - `X-Upstream-Url`
    - `X-Downstream-Prefix`
    - `X-Original-Location` ([redirects](https://github.com/Blazemeter/private-cloud/blob/9e72eaefa593b703340539011beace693a6617df/private_cloud/client/__init__.py#L199))

: Keycloak SSO issue
