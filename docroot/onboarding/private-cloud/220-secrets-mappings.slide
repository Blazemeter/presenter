## Secrets & Mappings

- Secrets **stored** in customer's S3-compatible storage
    - S3 files `(err.)keys(.apm*)`
- [Codec](https://github.com/Blazemeter/private-cloud/tree/master/bzm_app/codec) hashes secret with user provided [ENCODE_HASH_SALT](https://github.com/Blazemeter/private-cloud/blob/a9596f6a9e5529e2e089d582c1abaae044b3d63e/bzm_app/config.py#L153)
    - Optional, sane default: `ACCOUNT_ID`
    - Salt change **does not** affect decode!
- [Mappings](https://github.com/Blazemeter/private-cloud/blob/master/bzm_app/mapping.py#L259) abstracts secret files access
- [Hooks](https://github.com/Blazemeter/private-cloud/tree/master/app/bzm_gateway_interceptor/hooks), [handlers](https://github.com/Blazemeter/private-cloud/tree/master/private_cloud/handler)
    - **Which** Mappings involved (ie. paths)
    - **When**, **[what](https://github.com/Blazemeter/private-cloud/blob/master/app/bzm_gateway_interceptor/blazemeter/client.py#L24)** to encode or decode
- When adding secrets **always** use context manager `with Mapping(...) as m:`
    - Convenience method [merge](https://github.com/Blazemeter/private-cloud/blob/master/bzm_app/mapping.py#L230) allows to gather secrets from several keys files

: Dictionary
